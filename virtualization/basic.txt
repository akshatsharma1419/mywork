Virtualization:
Only render what's available on the screen/viewport
Remove the DOM elements not in viewport, append DOM elements which come in view port

Libraries: react-window/react-virtualized

Cons:
    Accessibility issue
    Not searchable using cmd/find
    heavy list can show jank

// react-virtualized

import {List, AutoSizer, CellMeasurer, CellMeasurerCache} from 'react-virtualized';

function App(){
  let people=[{},{},{}....10000 objects];
  return (
    <div>
    <List 
      width={600} 
      height={600} 
      rowHeight={50} 
      rowCount={people.length} 
      rowRenderer={({key,index,style,parent})=>{
        const person=people[index];
        return <div key={key} style={style}>{person.name}</div>;
      }}
    />
    </div>
  );
}

// Using AutoSizer

<div style={{width:"100%",height:"100vh"}}>
  <AutoSizer>
    {({width, height})=>(
      <List 
        width={width} 
        height={height} 
        rowHeight={50} 
        rowCount={people.length} 
        rowRenderer={({key,index,style,parent})=>{
          const person=people[index];
          return <div key={key} style={style}>{person.name}</div>;
        }}
      />
    )}
  </AutoSizer>
</div>

// In above as we use rowHeight, so if data is more the content will be overridden
Hence we need to use CellMeasurer here

We need to create a ref
const cache = React.useRef(new CellMeasurerCache({
  fixedWidth:true,
  defaultHeight:100
}))

<div style={{width:"100%",height:"100vh"}}>
  <AutoSizer>
    {({width, height})=>(
      <List 
        width={width} 
        height={height} 
        rowHeight={cache.currrent.rowHeight}
        deferredMeasurementCache={cache.current}
        rowCount={people.length} 
        rowRenderer={({key,index,style,parent})=>{
          const person=people[index];
          return (
            <CellMeasurer key={key} cache={cache.current} parent={parent} rowIndex={index} columnIndex={0}>
              <div style={style}>
                {person.name}
              </div>;
            </CellMeasurer>
            )
        }}
      />
    )}
  </AutoSizer>
</div>

---------------------------------------------------------------------------------------------------------
react-window

import {FixedSizeList} from 'react-window';

function App(){
  const Row = useCallback(({index, key, style})=>{
    const rowD = data[index];
    return (<div key={key} style={style}>
              {rowD.name}
            </div>)
  })
  return (
    <div>
    <FixedSizeList height={400} width={400} itemSize={150} itemCount={data.length}>
      {Row}
    </FixedSizeList>
    </div>
  )
}

const Cell = ({ columnIndex, rowIndex, style }) => (
  <div style={style}>
    Item {rowIndex},{columnIndex}
  </div>
);
 
const Example = () => (
  <Grid
    columnCount={1000}
    columnWidth={100}
    height={150}
    rowCount={1000}
    rowHeight={35}
    width={300}
  >
    {Cell}
  </Grid>
);

const Example = () => (
  <Grid
    columnCount={1000}
    columnWidth={index => columnWidths[index]}
    height={150}
    rowCount={1000}
    rowHeight={index => rowHeights[index]}
    width={300}
  >
    {Cell}
  </Grid>
);